Resumo Solid

1. Single Responsibility Principle
    > Princípio da Responsabilidade Única. A tradução disso, de maneira simples, é coesão. Uma classe coesa é aquela que contém apenas uma única responsabilidade. Ou seja, ela toma conta de apenas um conceito dentro do sistema.
    Classes coesas tendem a ser menores, e por consequência, mais fáceis de serem lidas e mantidas. Elas também tendem a ser mais reutilizáveis, afinal são mais fáceis.

2. Interface Segregation Principle
    > Princípio de Segregação de Interfaces. Se a interface mudar, a mudança tende a ser propagada em menos pontos. Lembre-se que a nossa ideia é diminuir ao máximo a quantidade de pontos de mudança.

3. Acoplamento 
    > Eferente: Classes dependo de outras

    > Aferente: Mostra quem depende de uma determinada classe.

4. Open Closed Principle
    > A ideia é que as classes sejam abertas para extensão. Ou seja, que seja possível estendê-la, ou seja, mudar o comportamento dela, de maneira fácil. Mas ela tem que estar fechada para alteração. Ou seja, eu não tenho que ficar o tempo inteiro indo nela pra mexer um if a mais, para fazer uma modificação ou coisa do tipo. Então, de novo, fechada para modificação, ou seja, eu não quero ter que o tempo inteiro entrar nela e sair escrevendo código, mas ela tem que estar aberta para extensão, ou seja, eu tenho que conseguir mudar a execução dela ao longo do tempo.

5. Dependency Inversion Principles
    > A ideia é: sempre que uma classe for depender, depende de uma classe mais estável. Então, A* depende de *B, a ideia é que B* seja mais estável que *A. Mas B* depende de *C. Então, a ideia e que C* seja mais estável que *B. A ideia é que você sempre passe a depender de modos mais estáveis que você. Se está numa abstração, a ideia é de que a abstração não conheça a implementação. E a abstração, por sua vez, ela só pode conhecer outras abstrações. A ideia é que ela não conheça detalhes de implementação.

6. Encapsular
    > Esconder os detalhes da implementação dentro da classe. Dessa forma, as classes que farão uso dela, não saberão como ela funciona internamente. A vantagem disso é que conseguimos depois facilmente alterar a implementação, sem que ela impacte nas classes dependentes.

7. Lei de Demeter
    > Evite ao máximo fazer expressões como a.getB().getC().getD().acao(). O problema dessa cadeia, é que a classe que contém essa expressão, conhece muito sobre o comportamento da classe A, depois da classe B, até D. Se alguma delas mudar, a mudança será propagada para muitos lugares.
    Diminuir a quantidade de invocações como essas ajuda a encapsular melhor o comportamento e o funcionamento interno das classes.